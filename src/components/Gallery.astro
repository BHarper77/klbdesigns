---
import { Image } from "astro:assets"
import { queryTags } from "../utils/contentful/api"
import { throwError } from "../utils/helpers"

type Props = {
	tag: string
}

const { tag } = Astro.props

const tags = await queryTags(`metadata.tags.sys.id[all]=${tag}`)

const images = tags.items.map((item) => {
	// response returns alt and media metadata in different arrays
	// match via media ID
	const itemId = item.fields.media.sys.id
	const asset =
		tags.includes.Asset.find((asset) => asset.sys.id === itemId) ??
		throwError(`Couldn't find corresponding asset for item ${itemId}`)

	return {
		alt: item.fields.alt,
		src: asset.fields.file.url,
		height: asset.fields.file.details.image.height,
		width: asset.fields.file.details.image.width,
	}
})

type Image = (typeof images)[number]

const columns = Array.from({ length: 4 }, () => ({ height: 0, images: [] as Image[] }))

for (const image of images) {
	// get column with lowest total height
	const targetColumn = columns.sort((a, b) => a.height - b.height)[0] ?? throwError("Error getting target column")

	targetColumn.images.push(image)
	targetColumn.height += image.height
}

const imageArrays = columns.map((column) => column.images)
---

<div id="container" class="grid grid-cols-1 sm:grid-cols-4 p-5 sm:p-12 gap-4 z-50">
	{
		imageArrays.map((images) => (
			<div>
				{images.map((image) => (
					<Image
						src={image.src}
						alt={image.alt}
						width={image.width}
						height={image.height}
						class="h-auto max-w-full pb-4"
						loading="lazy"
					/>
				))}
			</div>
		))
	}
</div>

---
import type { ContentfulResponse } from "../types/Contentful"
import { throwError } from "../utils/Helpers"

type Props = {
	tag: string
}

const { tag } = Astro.props

const spaceId = import.meta.env.SPACE_ID
const accessToken = import.meta.env.ACCESS_TOKEN

const url = `https://cdn.contentful.com/spaces/${spaceId}/environments/master/entries?
		access_token=${accessToken}&
		metadata.tags.sys.id[all]=${tag}`

const contentfulResponse = (await fetch(url, {
	method: "GET",
	redirect: "follow",
}).then(async (response) => await response.json())) as ContentfulResponse

const remoteImages = contentfulResponse.items.map((item, index) => {
	const asset = contentfulResponse.includes.Asset[index] ?? throwError("Error finding corresponding asset object")
	return {
		alt: item.fields.alt,
		src: asset.fields.file.url,
	}
})

type Image = {
	src: string
	alt: string
}

function splitImageArray(array: Image[], subArrayCount: number) {
	const subArrays: Image[][] = Array.from({ length: subArrayCount }, () => [])

	for (let i = 0; i < array.length; i++) {
		const subArrayIndex = i % subArrayCount
		subArrays[subArrayIndex]!.push(array[i]!)
	}

	return subArrays
}

const imageArrays = splitImageArray(remoteImages, 4)
---

<div id="container" class="grid grid-cols-1 sm:grid-cols-4 p-5 sm:p-12 gap-4 z-50">
	<div>
		{
			imageArrays[0]?.map((image) => (
				<img class="h-auto max-w-full pb-4" src={image.src} alt={image.alt} loading="lazy" />
			))
		}
	</div>
	<div>
		{
			imageArrays[1]?.map((image) => (
				<img class="h-auto max-w-full pb-4" src={image.src} alt={image.alt} loading="lazy" />
			))
		}
	</div>
	<div>
		{
			imageArrays[2]?.map((image) => (
				<img class="h-auto max-w-full pb-4" src={image.src} alt={image.alt} loading="lazy" />
			))
		}
	</div>
	<div>
		{
			imageArrays[3]?.map((image) => (
				<img class="h-auto max-w-full pb-4" src={image.src} alt={image.alt} loading="lazy" />
			))
		}
	</div>
</div>

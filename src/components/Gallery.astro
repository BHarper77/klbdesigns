---
import { Image } from "astro:assets"
import { queryTags } from "../utils/contentful/api"
import { throwError } from "../utils/helpers"
import Etsy from "./svgs/Etsy.astro"
import Instagram from "./svgs/Instagram.astro"

type Props = {
	tag: string
}

const { tag } = Astro.props

const tags = await queryTags(`metadata.tags.sys.id[all]=${tag}`)

const images = tags.items.map((item) => {
	// response returns alt and media metadata in different arrays
	// match via media ID
	const itemId = item.fields.media.sys.id
	const asset =
		tags.includes.Asset.find((asset) => asset.sys.id === itemId) ??
		throwError(`Couldn't find corresponding asset for item ${itemId}`)

	return {
		alt: item.fields.alt,
		src: asset.fields.file.url,
		height: asset.fields.file.details.image.height,
		width: asset.fields.file.details.image.width,
		instagramUrl: item.fields.instagramUrl,
		etsyUrl: item.fields.etsyUrl,
	}
})

type Image = (typeof images)[number]

const columns = Array.from({ length: 4 }, () => ({ height: 0, images: [] as Image[] }))

for (const image of images) {
	// get column with lowest total height
	const targetColumn = columns.sort((a, b) => a.height - b.height)[0] ?? throwError("Error getting target column")

	targetColumn.images.push(image)
	targetColumn.height += image.height
}

const imageArrays = columns.map((column) => column.images)
const sortedImageArrays = imageArrays.sort((a, b) => b.length - a.length)

const svgSize = 30

function transition<T extends string>(prop: T): `transition-${T} ease-in-out duration-200` {
	return `transition-${prop} ease-in-out duration-200`
}

const svgClassList = "fill-white z-20"
---

<style>
	/* can't add multiple custom transitions with tailwind */
	#image-overlay {
		transition:
			/* delay visibility so opacity can transition */
			visibility 0.3s,
			opacity 0.3s;
	}
</style>

<script>
	const imageOverlay = document.getElementById("image-overlay")
	const enlargedImage = document.getElementById("enlarged-image") as HTMLImageElement

	if (!imageOverlay || !enlargedImage) {
		console.error("Error enlarging image")
	}

	document.querySelectorAll<HTMLImageElement>("#image").forEach((imageEl) => {
		imageEl.addEventListener("click", () => {
			enlargedImage.src = imageEl.src
			imageOverlay!.style.visibility = "visible"
			imageOverlay!.style.opacity = "1"
		})
	})

	// Close the overlay when clicked
	imageOverlay!.addEventListener("click", () => {
		imageOverlay!.style.visibility = "hidden"
		imageOverlay!.style.opacity = "0"
	})
</script>

<div id="container" class="grid grid-cols-1 sm:grid-cols-4 p-5 sm:p-12 gap-4 z-50">
	{
		sortedImageArrays.map((images) => (
			<div>
				{images.map((image) => (
					// relative block to display svg links on top of image
					<div class="inline-block relative group">
						<Image
							id="image"
							src={image.src}
							alt={image.alt}
							width={image.width}
							height={image.height}
							class={
								(image.etsyUrl || image.instagramUrl) && `group-hover:shadow-xl ${transition("shadow")}`
							}
							loading="lazy"
						/>
						<div
							class={`flex absolute bottom-0 w-full p-1 z-10 opacity-0 group-hover:opacity-100 ${transition("opacity")} group-hover:backdrop-blur-sm ${transition("blur")}`}
						>
							{image.etsyUrl && (
								<a href={image.etsyUrl} target="_blank">
									<Etsy classList={svgClassList} width={svgSize} height={svgSize} />
								</a>
							)}
							{image.instagramUrl && (
								<a href={image.instagramUrl} target="_blank">
									<Instagram classList={svgClassList} width={svgSize} height={svgSize} />
								</a>
							)}
						</div>
					</div>
				))}
			</div>
		))
	}
</div>

<div
	id="image-overlay"
	class="fixed top-0 left-0 w-full h-full bg-gray-900/50 z-50 flex justify-center items-center invisible opacity-0"
>
	<img id="enlarged-image" class="max-w-[90%] max-h-[90%]" />
</div>

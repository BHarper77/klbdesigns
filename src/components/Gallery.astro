---
type Props = {
	filepath: string
}

type Image = {
	default: {
		src: string
	}
}

const { filepath } = Astro.props

// glob has to be statically analyzed, can't use variables
const images = (await (async (filepath) => {
	switch (filepath) {
		case "../assets/christmas2023/*.jpg":
			return await Astro.glob("../assets/christmas2023/*.jpg")
		case "../assets/textiles/*.jpg":
			return await Astro.glob("../assets/textiles/*.jpg")
		case "../assets/animals/*.jpg":
			return await Astro.glob("../assets/animals/*.jpg")
	}

	throw new Error("Unreachable code")
})(filepath)) as Image[]

function splitImageArray(array: Image[]) {
	const subArrays: Image[][] = Array.from({ length: 4 }, () => [])

	for (let i = 0; i < array.length; i++) {
		const subArrayIndex = i % 4
		subArrays[subArrayIndex]!.push(array[i]!)
	}

	return subArrays
}

const imageArrays = splitImageArray(images)
---

<div class="grid grid-cols-4 gap-4 p-12">
	<div class="grid">
		{imageArrays[0]?.map((image) => <img class="h-auto max-w-full" src={image.default.src} alt="" />)}
	</div>
	<div class="grid">
		{imageArrays[1]?.map((image) => <img class="h-auto max-w-full" src={image.default.src} alt="" />)}
	</div>
	<div class="grid">
		{imageArrays[2]?.map((image) => <img class="h-auto max-w-full" src={image.default.src} alt="" />)}
	</div>
	<div class="grid">
		{imageArrays[3]?.map((image) => <img class="h-auto max-w-full" src={image.default.src} alt="" />)}
	</div>
</div>

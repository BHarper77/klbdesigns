---
type Props = {
	filepath: string
}

const { filepath } = Astro.props

// glob has to be statically analyzed, can't directly use variables
const images = await (async (filepath) => {
	switch (filepath) {
		case "../assets/christmas2023/*.jpg":
			return await Astro.glob("../assets/christmas2023/*.jpg")
		case "../assets/textiles/*.jpg":
			return await Astro.glob("../assets/textiles/*.jpg")
		case "../assets/animals/*.jpg":
			return await Astro.glob("../assets/animals/*.jpg")
	}

	throw new Error("Unreachable code")
})(filepath)
---

<script>
	import { Carousel } from "flowbite"

	const items = [...document.querySelectorAll('[id*="carousel-item"]')].map((element, index) => ({
		position: index,
		el: element as HTMLElement,
	}))

	const carouselCaption = document.getElementById("carousel-caption") as HTMLElement
	const carouselPrevious = document.getElementById("indicator-1") as HTMLElement
	const carouselNext = document.getElementById("indicator-2") as HTMLElement

	let currentCarouselIndex = 0
	const min = items.at(0)!.position
	const max = items.at(-1)!.position

	// flowbite carousel event methods are broken so using custom event listeners
	carouselPrevious.addEventListener("click", () => {
		// handle case of pressing previous on first pic
		if (currentCarouselIndex === min) {
			currentCarouselIndex = max + 1
		}

		currentCarouselIndex = --currentCarouselIndex
	})

	carouselNext.addEventListener("click", () => {
		// handle case of pressing next on last pic
		if (currentCarouselIndex === max) {
			currentCarouselIndex = min - 1
		}

		currentCarouselIndex = ++currentCarouselIndex
	})

	new Carousel(document.getElementById("default-carousel"), items, {
		onChange: () => {
			carouselCaption.innerText = currentCarouselIndex.toString()
		},
		indicators: {
			items: [
				{
					position: 0,
					el: carouselPrevious,
				},
				{
					position: 1,
					el: carouselNext,
				},
			],
		},
	})
</script>
<div
	id="default-carousel"
	class="flex flex-col items-center justify-center relative w-full h-full"
	data-carousel="static"
>
	<div class="relative overflow-hidden h-3/4 w-3/4">
		{
			images.map((image, index) => (
				<div id={`carousel-item-${index}`} class="hidden duration-1000 ease-in-out" data-carousel-item>
					<img
						class="absolute block h-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"
						src={image.default.src}
						alt=""
					/>
				</div>
			))
		}
	</div>

	<div class="flex flex-row items-center justify-center">
		<button id="indicator-1" type="button" class="flex items-center justify-center p-4" data-carousel-prev>
			<span class="inline-flex items-center justify-center w-10 h-10 rounded-full">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					data-slot="icon"
					class="w-6 h-6"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75 3 12m0 0 3.75-3.75M3 12h18"
					></path>
				</svg>
				<!-- screen reader -->
				<span class="sr-only">Previous</span>
			</span>
		</button>

		<button id="indicator-2" type="button" class="flex items-center justify-center p-4" data-carousel-next>
			<span class="inline-flex items-center justify-center w-10 h-10 rounded-full">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					data-slot="icon"
					class="w-6 h-6"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25 21 12m0 0-3.75 3.75M21 12H3"
					></path>
				</svg>
				<!-- screen reader -->
				<span class="sr-only">Next</span>
			</span>
		</button>
	</div>

	<div id="carousel-caption" class="font-light">By Kirsty Baird</div>
</div>
